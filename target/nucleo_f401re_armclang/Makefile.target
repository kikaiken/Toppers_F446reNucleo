#
#		Makefile のターゲット依存部（NUCLEO_F401RE用）
#

#
#  ボード名，プロセッサ名，開発環境名の定義
#  それぞれの名前はディレクトリ名に対応していることに注意。
#
PRC   = arm_m
CHIP  = stm32f4xx_stm32cube
TOOL  = armclang
BOARD = nucleo_f401re

#
#  GCC用のファイルのディレクトリ
#
TARGETDIR_GCC := $(SRCDIR)/target/$(BOARD)_gcc

#
#  FPUを使用するか
#
FPU_USAGE = FPU_LAZYSTACKING

#
#  コンパイルオプション
#
INCLUDES := $(INCLUDES) -I$(TARGETDIR) -I$(TARGETDIR_GCC)/stm32fcube
CDEFS := $(CDEFS) -DSTM32F401xE
COPTS := $(COPTS)

#
#  カーネルに関する定義
#
KERNEL_DIR := $(KERNEL_DIR) $(TARGETDIR) $(TARGETDIR_GCC)/stm32fcube
KERNEL_ASMOBJS := $(KERNEL_ASMOBJS) 
KERNEL_COBJS := $(KERNEL_COBJS)  target_config.o  \
                system_stm32f4xx.o stm32f4xx_nucleo.o systemclock_config.o \
                stm32f4xx_hal_gpio.o stm32f4xx_hal_uart.o \
                stm32f4xx_hal_rcc.o stm32f4xx_hal_dma.o
KERNEL_CFLAGS := $(KERNEL_CFLAGS) 

#
#  システムサービスに関する定義
#
SYSSVC_DIR := $(SYSSVC_DIR)
SYSSVC_COBJS := $(SYSSVC_COBJS) usart.o

#
#  リンカスクリプト(スキャッターファイル)の定義
#
SCATTER = $(SRCDIR)/target/$(BOARD)_$(TOOL)/stm32f401re.scat

LDFLAGS := $(LDFLAGS) --scatter=$(SCATTER)

#
#  スタートアップモジュールに関する定義
#
START_OBJS = start.o

$(START_OBJS): %.o: %.S
	$(CC) -c $(CFLAGS) $(KERNEL_CFLAGS) $<

$(START_OBJS:.o=.d): %.d: %.S
	@$(PERL) $(SRCDIR)/utils/makedep -C $(CC) $(MAKEDEP_OPTS) \
		-O "$(CFLAGS) $(KERNEL_CFLAGS)" $< >> Makefile.depend

LDFLAGS := $(LDFLAGS) --entry=_kernel__start

#
#  依存関係の定義
#
kernel_cfg.timestamp: $(TARGETDIR_GCC)/target.tf
$(OBJFILE): $(TARGETDIR_GCC)/target_check.tf

#
#  プロセッサ依存部のインクルード
#
include $(SRCDIR)/arch/$(PRC)_$(TOOL)/$(CHIP)/Makefile.chip

#
#  同じファイルがあった場合にARMCC依存部の
#  ファイルを使用するようにする
#
INCLUDES := $(INCLUDES) -I$(TARGETDIR_GCC)
KERNEL_DIR := $(KERNEL_DIR) $(TARGETDIR_GCC)


#
#  フラッシュへの書き込み
#
UNAME_TARGET = Cygwin
OPENOCD_PATH = /cygdrive/c/arm/OpenOCD/0.10.0-201510281129-dev/bin/openocd.exe
OPENOCD_SCRIPT_PATH = c:/arm/OpenOCD/0.10.0-201510281129-dev/scripts
OPENOCD_SCRIPT  = c:/arm/OpenOCD/0.10.0-201510281129-dev/scripts/board/st_nucleo_f4.cfg

ifeq ($(UNAME_TARGET), Cygwin)
	GDB = arm-gdb_m0.exe
else
	GDB = $(ARDUINO_BASE_DIR_WIN)\hardware\tools\gcc-arm-none-eabi-4.8.3-2014q1\bin\arm-none-eabi-gdb
endif

run: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	"`cygpath -u "$(OPENOCD_PATH)"`" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT)" -c "program ./$(OBJNAME).bin verify 0x08000000 reset exit"
#-c "flash probe 0; flash write_image erase ./$(OBJNAME).axf 0x08000000 reset exit"
else
	"$(OPENOCD_PATH)" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT)" -c "program ./$(OBJNAME).bin verify 0x4000 reset exit"
endif

ocd: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	cygstart "$(OPENOCD_PATH)" '-s "$(OPENOCD_SCRIPT_PATH)"' '-f "$(OPENOCD_SCRIPT)"'
else
	start /MIN "" "$(OPENOCD_PATH)" -s "$(OPENOCD_SCRIPT_PATH)" -f "$(OPENOCD_SCRIPT)"
endif

db: $(OBJNAME).bin
ifeq ($(UNAME_TARGET), Cygwin)
	$(GDB) $(OBJFILE) -x $(TARGETDIR_GCC)/gdb.ini
else
	$(GDB) $(OBJFILE) -x $(TARGETDIR_GCC)/gdb.ini
endif
